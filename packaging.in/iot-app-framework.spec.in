#
# By default we build with the default distro-specific compilation
# flags which tend to turn on aggressive optimization and turn off
# debugging altogether. If you want to build with full debugging
# support instead (IOW -O0 -g3) pass '--with debug' to rpmbuild on
# the command line. Similarly you can control whether to enable
# or disable glib, pulse, ecore, or Qt mainloop support.
#

%{!?_with_debug:%{!?_without_debug:%define _without_debug 0}}
%{!?_with_pulse:%{!?_without_pulse:%define _with_pulse 1}}
%{!?_with_ecore:%{!?_without_ecore:%define _without_ecore 1}}
%{!?_with_glib:%{!?_without_glib:%define _with_glib 1}}
%{!?_with_qt:%{!?_without_qt:%define _without_qt 1}}
%{!?_with_node:%{!?_without_node:%define _without_node 0}}
%{!?_with_python:%{!?_without_python:%define _without_python 1}}
%{!?_with_pm:%{!?_without_pm:%define _with_pm 1}}

%define systemddir /lib/systemd

Summary: IoT Application Framework
Name: iot-app-framework
Version: @VERSION@
Release: 1
License: BSD
Group: System Environment/Daemons
URL: http://girhub.com/otcshare/iot-app-fw
Source0: %{name}-%{version}.tar.gz

BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root

Requires: /bin/systemctl
BuildRequires: redhat-rpm-config

%if %{?_with_pulse:1}%{!?_with_pulse:0}
BuildRequires: pkgconfig(libpulse)
%endif
%if %{?_with_ecore:1}%{!?_with_ecore:0}
BuildRequires: pkgconfig(ecore)
BuildRequires: mesa-libEGL
BuildRequires: mesa-libGLESv2
BuildRequires: mesa-libgbm
%endif
%if %{?_with_glib:1}%{!?_with_glib:0}
BuildRequires: pkgconfig(glib-2.0)
%endif
%if %{?_with_qt:1}%{!?_with_qt:0}
BuildRequires: pkgconfig(QtCore)
%endif

%package devel
Summary: The header files and libraries needed for IoT Application development
Group: Development/Libraries
Requires: %{name} = %{version}

%package -n iot-app-launcher
Summary: IoT Application launcher client and daemon
Requires: iot-app-framework = %{version}

%if %{?_with_pm:1}%{!?_with_pm:0}
%package -n iot-package-manager
Summary: IoT Package Manager
Requires: iot-app-framework = %{version}
%endif

%package doc
Summary: Documentation for IoT Application Framework
Group: Documentation

%if %{?_with_pulse:1}%{!?_with_pulse:0}
%package pulse
Summary: IoT Application Framework PulseAudio mainloop library
Group: Development/Libraries
Requires: %{name} = %{version}

%package pulse-devel
Summary: IoT Application Framework Pulseaudio mainloop library development files
Group: Development/Libraries
Requires: %{name} = %{version}
Requires: %{name}-pulse = %{version}
%endif

%if %{?_with_glib:1}%{!?_with_glib:0}
%package glib
Summary: IoT Application Framework glib mainloop library
Group: Development/Libraries
Requires: %{name} = %{version}

%package glib-devel
Summary: IoT Application Framework glib mainloop library development files
Group: Development/Libraries
Requires: %{name} = %{version}
Requires: %{name}-glib = %{version}
%endif

%package tests
Summary: Various test binaries for IoT Application Framework
Group: Development/Debug
Requires: %{name} = %{version}

%description
This package contains the basic runtime libraries.

%description devel
This package contains header files and libraries necessary for development.

%description -n iot-app-launcher
This package contains the IoT Application launcher daemon and client.

%if %{?_with_pm:1}%{!?_with_pm:0}
%description -n iot-package-manager
This package contains the IoT package Manager for installing, removing and
upgrading software.
%endif

%description doc
This package contains documentation.

%if %{?_with_pulse:1}%{!?_with_pulse:0}
%description pulse
This package contains the IoT Application Framework PulseAudio mainloop
library.

%description pulse-devel
This package contains development files for the IoT Application Framework
PulseAudio mainloop library.
files.
%endif

%if %{?_with_glib:1}%{!?_with_glib:0}
%description glib
This package contains the IoT Application Framework glib mainloop library.

%description glib-devel
This package contains development files for the IoT Application Framework
glib mainloop library.
%endif

%description tests
This package contains various test binaries for the IoT Application Framework.

%prep
%setup -q

%build
#%if %{?_with_debug:1}%{!?_with_debug:0}
export CFLAGS="-O0 -g3"
V="V=1"
#%endif

CONFIG_OPTIONS="--disable-security"

%if %{?_with_pulse:1}%{!?_with_pulse:0}
CONFIG_OPTIONS="$CONFIG_OPTIONS --enable-pulse"
%else
CONFIG_OPTIONS="$CONFIG_OPTIONS --disable-pulse"
%endif

%if %{?_with_ecore:1}%{!?_with_ecore:0}
CONFIG_OPTIONS="$CONFIG_OPTIONS --enable-ecore"
%else
CONFIG_OPTIONS="$CONFIG_OPTIONS --disable-ecore"
%endif

%if %{?_with_glib:1}%{!?_with_glib:0}
CONFIG_OPTIONS="$CONFIG_OPTIONS --enable-glib"
%else
CONFIG_OPTIONS="$CONFIG_OPTIONS --disable-glib"
%endif

%if %{?_with_qt:1}%{!?_with_qt:0}
CONFIG_OPTIONS="$CONFIG_OPTIONS --enable-qt"
%else
CONFIG_OPTIONS="$CONFIG_OPTIONS --disable-qt"
%endif

%if %{?_with_node:1}%{!?_with_node:0}
CONFIG_OPTIONS="$CONFIG_OPTIONS --with-node"
%else
CONFIG_OPTIONS="$CONFIG_OPTIONS --without-node --disable-uv"
%endif

%if %{?_with_python:1}%{!?_with_python:0}
CONFIG_OPTIONS="$CONFIG_OPTIONS --enable-python"
%else
CONFIG_OPTIONS="$CONFIG_OPTIONS --disable-python"
%endif

%if %{?_with_pm:1}%{!?_with_pm:0}
CONFIG_OPTIONS="$CONFIG_OPTIONS --with-backend=rpm4"
%else
CONFIG_OPTIONS="$CONFIG_OPTIONS --without-backend"
%endif

NUM_CPUS="`cat /proc/cpuinfo | tr -s '\t' ' ' | \
               grep '^processor *:' | wc -l`"
[ -z "$NUM_CPUS" ] && NUM_CPUS=1

./bootstrap && \
    %configure $CONFIG_OPTIONS && \
    make clean && \
    make -j$(($NUM_CPUS + 1)) $V

%install
rm -rf $RPM_BUILD_ROOT
%make_install

# Get rid of any *.la files installed by libtool.
find $RPM_BUILD_ROOT%{_libdir} -name \*.la -exec rm -f {} \;

# Generate list of header files, filtering ones that go to subpackages.
outdir="`pwd`"
pushd $RPM_BUILD_ROOT >& /dev/null && \
    find ./%{_includedir}/iot | \
        egrep -v './%{_includedir}/iot$' | \
        egrep -v './%{_includedir}/iot/common$' | \
        egrep -v './%{_includedir}/iot/app$' | \
        egrep -v '((pulse)|(ecore)|(glib)|(qt))-glue' | \
            sed 's#^./*#/#g' > $outdir/filelist.devel-includes && \
popd >& /dev/null

%clean
rm -rf $RPM_BUILD_ROOT

%post
#/bin/systemctl enable iot-app-launcher.service
ldconfig

%postun
#if [ "$1" = "0" ]; then
#    /bin/systemctl disable iot-app-launcher.service
#fi
ldconfig

%files
%defattr(-,root,root,-)
%{_libdir}/libiot-common.so.*
%{_libdir}/libiot-utils.so.*
%{_libdir}/libiot-app.so.*

%files devel -f filelist.devel-includes
%defattr(-,root,root,-)
%{_libdir}/libiot-common.so
%{_libdir}/pkgconfig/iot-common.pc
%{_libdir}/libiot-utils.so
%{_libdir}/pkgconfig/iot-utils.pc
%{_libdir}/libiot-app.so
%{_libdir}/pkgconfig/iot-app.pc

%files -n iot-app-launcher
%defattr(-,root,root,-)
%{_bindir}/iot-launch-daemon
%{_bindir}/iot-launch
%{_libexecdir}/iot-launcher/*
/lib/systemd/system/iot-launch.service
/lib/systemd/system/iot-launch.socket

%if %{?_with_pm:1}%{!?_with_pm:0}
%files -n iot-package-manager
%defattr(-,root,root,-)
%{_bindir}/iotpm
%endif

%files doc
%defattr(-,root,root,-)
%doc %{_docdir}/iot-app-framework*
%license COPYING LICENSE-BSD

%if %{?_with_pulse:1}%{!?_with_pulse:0}
%files pulse
%defattr(-,root,root,-)
%{_libdir}/libiot-pulse.so.*

%files pulse-devel
%defattr(-,root,root,-)
%{_includedir}/iot/common/pulse-glue.h
%{_libdir}/libiot-pulse.so
%{_libdir}/pkgconfig/iot-pulse.pc
%endif

%if %{?_with_glib:1}%{!?_with_glib:0}
%files glib
%defattr(-,root,root,-)
%{_libdir}/libiot-glib.so.*

%files glib-devel
%defattr(-,root,root,-)
%{_includedir}/iot/common/glib-glue.h
%{_libdir}/libiot-glib.so
%{_libdir}/pkgconfig/iot-glib.pc
%endif

%files tests
%defattr(-,root,root,-)
%{_bindir}/iot-app-list
%{_bindir}/iot-manifest-test
%{_bindir}/iot-event-test
%{_bindir}/iot-event-send
%{_bindir}/iot-event-catch

%changelog
* Mon Jun 08 2015 Krisztian Litkey <krisztian.litkey@intel.com> -
- Initial packaging.
